---
# cfg
- name: Create mongodb group info.
  group:
    name: mongodb

- name: Create user.
  user:
    name: mongodb
    group: mongodb

- name: Check docker install.
  package:
    name: docker
    state: present

- name: Ensure db client packages are installed (Debian/Ubuntu)
  apt: name={{item}} state=present
  with_items:
    - mongodb-org-tools
  when: mongodb_install_cli and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')


# env

- name: Cfg Environment /w auth
  set_fact:
    mongodb_auth_env:
      MONGO_INITDB_ROOT_USERNAME: '{{ mongodb_admin_user | mandatory }}'
      MONGO_INITDB_ROOT_PASSWORD: '{{ mongodb_admin_password | mandatory }}'
  when: mongodb_auth

- name: 'Configuration: Environment without Auth'
  set_fact:
    mongodb_auth_env: {}
  when: not mongodb_auth

- name: 'Configuration: Init database'
  set_fact:
    mongodb_auth_env: '{{ mongodb_auth_env | combine({"MONGO_INITDB_DATABASE":mongodb_db}) }}'
  when: mongodb_db is defined

- name: 'Configuration: Render config directories'
  file:
    path: "{{ mongodb_settings_path + '/' | dirname }}"
    state: directory
    recurse: yes

- name: 'Configuration: Render user config script'
  template:
    src: 'users.js.j2'
    dest: '{{ mongodb_users_config_path }}'


# tasks svs
- name: Create data container
  docker_container:
    name: '{{ mongodb_container_name }}-data'
    image: '{{ mongodb_docker_image }}:{{ mongodb_docker_image_tag }}'
    state: present

- name: Run mongodb container
  docker_container:
    name: '{{ mongodb_container_name }}'
    image: '{{ mongodb_docker_image }}:{{ mongodb_docker_image_tag }}'
    restart_policy: always
    state: started
    memory: '{{ container_memory_limit | default(omit) }}'
    # env: 
      # - '{{ mongodb_env}}'
      # - '{{mongodb_auth_env}}'
    volumes: '{{ mongodb_volumes + [mongodb_users_config_mount] }}'
    volumes_from:
      - '{{ mongodb_container_name }}-data'
    ports:
      - '{{ mongodb_port }}:{{ mongodb_internal_port }}'
  register: mongodb_container

- name: Wait until mongodb starts up
  wait_for:
    port: '{{ mongodb_port }}'
    delay: 5