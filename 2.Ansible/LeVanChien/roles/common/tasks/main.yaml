- include_tasks: setup_centos.yaml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup_ubuntu.yaml
  when: ansible_os_family == 'Debian'

- name: Install Docker packages 
  package:
    name: "{{ docker_packages }}"
    state: present
    allow_downgrade: true
  notify: restart docker
  
# - name: Ensure /etc/docker/ directory exists.
#   file:
#     path: /etc/docker
#     state: directory
#     mode: 0755
#   when: docker_daemon_options.keys() | length > 0

# - name: Configure Docker daemon options.
#   copy:
#     content: "{{ docker_daemon_options | to_nice_json }}"
#     dest: /etc/docker/daemon.json
#     mode: 0644
#   when: docker_daemon_options.keys() | length > 0
#   notify: restart docker

- name: Ensure Docker is started and enabled at boot.
  service:
    name: docker
    state: started
    enabled: true

# - name: Check current docker-compose version.
#   command: "{{ docker_compose_path }} --version"
#   register: docker_compose_vsn
#   check_mode: false
#   changed_when: false
#   failed_when: false

# - set_fact:
#     docker_compose_current_version: "{{ docker_compose_vsn.stdout | regex_search('(\\d+(\\.\\d+)+)') }}"
#   when: >
#     docker_compose_vsn.stdout is defined
#     and (docker_compose_vsn.stdout | length > 0)

- name: Delete existing docker-compose version if it's different.
  file:
    path: "{{ docker_compose_path }}"
    state: absent
  when: >
    docker_compose_current_version is defined
    and (docker_compose_version | regex_replace('v', '')) not in docker_compose_current_version

- name: Install Docker Compose (if configured).
  get_url:
    url: "{{ docker_compose_url }}"
    dest: "{{ docker_compose_path }}"
    mode: 0755
  when: >
    (docker_compose_current_version is not defined)
    or (docker_compose_current_version | length == 0)
    or (docker_compose_current_version is version((docker_compose_version | regex_replace('v', '')), '<'))


- name: Get docker group info using getent.
  getent:
    database: group
    key: docker
    split: ':'
  when: docker_users | length > 0

- name: Check if there are any users to add to the docker group.
  set_fact:
    at_least_one_user_to_modify: true
  when:
    - docker_users | length > 0
    - item not in ansible_facts.getent_group["docker"][2]
  with_items: "{{ docker_users }}"

- name: Ensure docker users are added to the docker group.
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  with_items: "{{ docker_users }}"